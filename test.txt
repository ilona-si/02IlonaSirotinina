
//?   5  и 8


//1
var x =10;
var y = function(){  //2 идем сюда
	var x=20;	     //3 переобределяем x, но x локальная переменная
	z();             //4 вызываем функцию z 
}

var z = function(){  //5
	console.log(x);  //6 x не был передан как агрумент, поэтому берем глобальную переменную x=10
}

y();     //1  вызываем функцию y
ответ: 10


//2
var a=10;
var b=20;
function z(a,b){  //2
	y();    //3  а = 10 т.к. несмотря на то,что внутри функции значение изменилось, мы его не возвращаем
	x();	//6  b = 20 т.к. несмотря на то,что внутри функции значение изменилось, мы его не возвращаем
	console.log(a+b);  
}
function y(){   //4
	a=30;       //5 здесь а = 30, но мы не делаем return
}
function x(){  //7
	var b=40;  //8 здесь b = 40, но мы не делаем return
}
z(a,b);   //1 передаем в качестве параметра a=10, b=20;
//ответ: 30;


//3
var a = 10;
var b = 20;
var x = 30;
var y = 40;
(function(x,y) {    
	console.log(x,y);   //x=a=10   y=b=20
})(a, b);   //1 передаем в  функцию переменные a, b
//ответ: 10,20


//4
function Generate(i){
	return function(){
		console.log(i);  		//40, т.к. i=40 было передано в качестве аргумента
	};
}
var i = 40;      //  инициализация   i = 40
var func= Generate(i);  // инициализация func = Generic (40);
var i = 50;   	// инидиализация i
func();        //1 вызов func, при инициализации было передано i = 40
//ответ: 40


//5
//этот пример почему-то не работает, но вот, что я думаю:
function handle(a,b){   //handle(10,20)
	return (function(x,y){    //function(10*20, undefined)
				return{ field: x*y;}   // не знаю,что такое field, но number*undefined = number
			})(a*b);
}
console.log(typeof(handle(10,20)));  //1 передаем в handle 10, 20
//ответ: number


//6
var x=40;
var a=10, b=20;
(function(a){   //2 function(40)
	var x=15;
	var b=60;
	(function(b){     //4 function(40)
		console.log(b*x);   //b=40   x в функцию не передано, поднимаемся на уровень выше, где x = 15
	})(a)         //3 передаем в фнкцию а = 40
})(x);    //1 передаем x=40;
//ответ: 40*15=600


//7
function Human(name){
	return {
		name: name,  //2 name = Alex
		sayName : function(){
			console.log(this.name);    //this.name = Alex
				  }
	}
}
var name="Maria";
Human("Alex").sayName();    //1 передаем "Alex". и вызываем метод sayName
//ответ: Alex





//8
//этот пример тоже неработает, мои размышления:
function Human(name){
	return {
		name: name,  
		sayName : function(){
			console.log(this.name);    
				  }
	}
}  
var alex = Human("Alex");   //this.name = Alex
var maria = Human("Maria"); //this.name = Marina
alex.sayName().call(maria); // у объекта Alex вызываем метод sayName и на этом методе вызываем name объекта maria
//ответ: Maria


//9
// исходя из рассуждений к задаче 8
function Human(name){
	return {
		name: name,  
		sayName : function(){
			console.log(this.name);    
				  }
	}
}  
var alex = Human("Alex");   //this.name = Alex
var maria = Human("Maria"); //this.name = Marina

(function(){
	return this.sayName;
}).apply(maria).call(alex);    //применяем объект maria на alex, получается this.name = Alex
//ответ: Alex


//10
var res = [1,2,3].reverse.call(                   //3 reverse [10,8,7,5,4,2,1]
							[].filter.call(    //2   = [1,2,4,5,7,8,10]      возвращает те элементы массива, которые дали true
										[1,2,3,4,5,6,7,8,9,10], function(e){
																	if (e%3==0) return false;  //1 [t,t,f,t,t,f,t,t,f,t] => [1,2,4,5,7,8,10]
																	return true;

																})).map(function(e){  //4
																	return e*3;      //[30,24,21,15,12,6,3]
																}).reduce(function(p,c){     //5
																	return p+c-1;     //  30+24-1+21-1+15-1+12-1+6-1+3-1=30+24+21+15+12+3=60+24+21=105
																});
console.log(typeof res);
console.log(res);
//ответ: number
//105